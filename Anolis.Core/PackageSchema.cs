//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 
namespace Anolis.Core.Xml {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PackageSchema")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Package : global::System.Data.DataSet {
        
        private packageDataTable tablepackage;
        
        private setDataTable tableset;
        
        private patchDataTable tablepatch;
        
        private resDataTable tableres;
        
        private fileDataTable tablefile;
        
        private extraDataTable tableextra;
        
        private filetypeDataTable tablefiletype;
        
        private global::System.Data.DataRelation relationpackage_set;
        
        private global::System.Data.DataRelation relationset_patch;
        
        private global::System.Data.DataRelation relationpatch_res;
        
        private global::System.Data.DataRelation relationset_file;
        
        private global::System.Data.DataRelation relationset_extra;
        
        private global::System.Data.DataRelation relationset_filetype;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Package(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["package"] != null)) {
                    base.Tables.Add(new packageDataTable(ds.Tables["package"]));
                }
                if ((ds.Tables["set"] != null)) {
                    base.Tables.Add(new setDataTable(ds.Tables["set"]));
                }
                if ((ds.Tables["patch"] != null)) {
                    base.Tables.Add(new patchDataTable(ds.Tables["patch"]));
                }
                if ((ds.Tables["res"] != null)) {
                    base.Tables.Add(new resDataTable(ds.Tables["res"]));
                }
                if ((ds.Tables["file"] != null)) {
                    base.Tables.Add(new fileDataTable(ds.Tables["file"]));
                }
                if ((ds.Tables["extra"] != null)) {
                    base.Tables.Add(new extraDataTable(ds.Tables["extra"]));
                }
                if ((ds.Tables["filetype"] != null)) {
                    base.Tables.Add(new filetypeDataTable(ds.Tables["filetype"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public packageDataTable package {
            get {
                return this.tablepackage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public setDataTable set {
            get {
                return this.tableset;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public patchDataTable patch {
            get {
                return this.tablepatch;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public resDataTable res {
            get {
                return this.tableres;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public fileDataTable file {
            get {
                return this.tablefile;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public extraDataTable extra {
            get {
                return this.tableextra;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public filetypeDataTable filetype {
            get {
                return this.tablefiletype;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Package cln = ((Package)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["package"] != null)) {
                    base.Tables.Add(new packageDataTable(ds.Tables["package"]));
                }
                if ((ds.Tables["set"] != null)) {
                    base.Tables.Add(new setDataTable(ds.Tables["set"]));
                }
                if ((ds.Tables["patch"] != null)) {
                    base.Tables.Add(new patchDataTable(ds.Tables["patch"]));
                }
                if ((ds.Tables["res"] != null)) {
                    base.Tables.Add(new resDataTable(ds.Tables["res"]));
                }
                if ((ds.Tables["file"] != null)) {
                    base.Tables.Add(new fileDataTable(ds.Tables["file"]));
                }
                if ((ds.Tables["extra"] != null)) {
                    base.Tables.Add(new extraDataTable(ds.Tables["extra"]));
                }
                if ((ds.Tables["filetype"] != null)) {
                    base.Tables.Add(new filetypeDataTable(ds.Tables["filetype"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablepackage = ((packageDataTable)(base.Tables["package"]));
            if ((initTable == true)) {
                if ((this.tablepackage != null)) {
                    this.tablepackage.InitVars();
                }
            }
            this.tableset = ((setDataTable)(base.Tables["set"]));
            if ((initTable == true)) {
                if ((this.tableset != null)) {
                    this.tableset.InitVars();
                }
            }
            this.tablepatch = ((patchDataTable)(base.Tables["patch"]));
            if ((initTable == true)) {
                if ((this.tablepatch != null)) {
                    this.tablepatch.InitVars();
                }
            }
            this.tableres = ((resDataTable)(base.Tables["res"]));
            if ((initTable == true)) {
                if ((this.tableres != null)) {
                    this.tableres.InitVars();
                }
            }
            this.tablefile = ((fileDataTable)(base.Tables["file"]));
            if ((initTable == true)) {
                if ((this.tablefile != null)) {
                    this.tablefile.InitVars();
                }
            }
            this.tableextra = ((extraDataTable)(base.Tables["extra"]));
            if ((initTable == true)) {
                if ((this.tableextra != null)) {
                    this.tableextra.InitVars();
                }
            }
            this.tablefiletype = ((filetypeDataTable)(base.Tables["filetype"]));
            if ((initTable == true)) {
                if ((this.tablefiletype != null)) {
                    this.tablefiletype.InitVars();
                }
            }
            this.relationpackage_set = this.Relations["package_set"];
            this.relationset_patch = this.Relations["set_patch"];
            this.relationpatch_res = this.Relations["patch_res"];
            this.relationset_file = this.Relations["set_file"];
            this.relationset_extra = this.Relations["set_extra"];
            this.relationset_filetype = this.Relations["set_filetype"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PackageSchema";
            this.Prefix = "";
            this.Namespace = "http://xpize.net/PackageSchema.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablepackage = new packageDataTable();
            base.Tables.Add(this.tablepackage);
            this.tableset = new setDataTable();
            base.Tables.Add(this.tableset);
            this.tablepatch = new patchDataTable();
            base.Tables.Add(this.tablepatch);
            this.tableres = new resDataTable();
            base.Tables.Add(this.tableres);
            this.tablefile = new fileDataTable();
            base.Tables.Add(this.tablefile);
            this.tableextra = new extraDataTable();
            base.Tables.Add(this.tableextra);
            this.tablefiletype = new filetypeDataTable();
            base.Tables.Add(this.tablefiletype);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("package_set", new global::System.Data.DataColumn[] {
                        this.tablepackage.package_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableset.package_IdColumn});
            this.tableset.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("set_patch", new global::System.Data.DataColumn[] {
                        this.tableset.set_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablepatch.set_IdColumn});
            this.tablepatch.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("patch_res", new global::System.Data.DataColumn[] {
                        this.tablepatch.patch_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableres.patch_IdColumn});
            this.tableres.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("set_file", new global::System.Data.DataColumn[] {
                        this.tableset.set_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablefile.set_IdColumn});
            this.tablefile.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("set_extra", new global::System.Data.DataColumn[] {
                        this.tableset.set_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableextra.set_IdColumn});
            this.tableextra.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("set_filetype", new global::System.Data.DataColumn[] {
                        this.tableset.set_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablefiletype.set_IdColumn});
            this.tablefiletype.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationpackage_set = new global::System.Data.DataRelation("package_set", new global::System.Data.DataColumn[] {
                        this.tablepackage.package_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableset.package_IdColumn}, false);
            this.relationpackage_set.Nested = true;
            this.Relations.Add(this.relationpackage_set);
            this.relationset_patch = new global::System.Data.DataRelation("set_patch", new global::System.Data.DataColumn[] {
                        this.tableset.set_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablepatch.set_IdColumn}, false);
            this.relationset_patch.Nested = true;
            this.Relations.Add(this.relationset_patch);
            this.relationpatch_res = new global::System.Data.DataRelation("patch_res", new global::System.Data.DataColumn[] {
                        this.tablepatch.patch_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableres.patch_IdColumn}, false);
            this.relationpatch_res.Nested = true;
            this.Relations.Add(this.relationpatch_res);
            this.relationset_file = new global::System.Data.DataRelation("set_file", new global::System.Data.DataColumn[] {
                        this.tableset.set_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablefile.set_IdColumn}, false);
            this.relationset_file.Nested = true;
            this.Relations.Add(this.relationset_file);
            this.relationset_extra = new global::System.Data.DataRelation("set_extra", new global::System.Data.DataColumn[] {
                        this.tableset.set_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableextra.set_IdColumn}, false);
            this.relationset_extra.Nested = true;
            this.Relations.Add(this.relationset_extra);
            this.relationset_filetype = new global::System.Data.DataRelation("set_filetype", new global::System.Data.DataColumn[] {
                        this.tableset.set_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablefiletype.set_IdColumn}, false);
            this.relationset_filetype.Nested = true;
            this.Relations.Add(this.relationset_filetype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepackage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeset() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepatch() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeres() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializefile() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeextra() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializefiletype() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Package ds = new Package();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void packageRowChangeEventHandler(object sender, packageRowChangeEvent e);
        
        public delegate void setRowChangeEventHandler(object sender, setRowChangeEvent e);
        
        public delegate void patchRowChangeEventHandler(object sender, patchRowChangeEvent e);
        
        public delegate void resRowChangeEventHandler(object sender, resRowChangeEvent e);
        
        public delegate void fileRowChangeEventHandler(object sender, fileRowChangeEvent e);
        
        public delegate void extraRowChangeEventHandler(object sender, extraRowChangeEvent e);
        
        public delegate void filetypeRowChangeEventHandler(object sender, filetypeRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class packageDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnversion;
            
            private global::System.Data.DataColumn columnattribution;
            
            private global::System.Data.DataColumn columnwebsite;
            
            private global::System.Data.DataColumn columnupdateUrl;
            
            private global::System.Data.DataColumn columnicon;
            
            private global::System.Data.DataColumn columnimage;
            
            private global::System.Data.DataColumn columndesc;
            
            private global::System.Data.DataColumn columnpackage_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packageDataTable() {
                this.TableName = "package";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal packageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected packageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn versionColumn {
                get {
                    return this.columnversion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn attributionColumn {
                get {
                    return this.columnattribution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn websiteColumn {
                get {
                    return this.columnwebsite;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn updateUrlColumn {
                get {
                    return this.columnupdateUrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iconColumn {
                get {
                    return this.columnicon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn imageColumn {
                get {
                    return this.columnimage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descColumn {
                get {
                    return this.columndesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn package_IdColumn {
                get {
                    return this.columnpackage_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packageRow this[int index] {
                get {
                    return ((packageRow)(this.Rows[index]));
                }
            }
            
            public event packageRowChangeEventHandler packageRowChanging;
            
            public event packageRowChangeEventHandler packageRowChanged;
            
            public event packageRowChangeEventHandler packageRowDeleting;
            
            public event packageRowChangeEventHandler packageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpackageRow(packageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packageRow AddpackageRow(string name, decimal version, string attribution, System.Uri website, System.Uri updateUrl, System.Uri icon, System.Uri image, System.Uri desc) {
                packageRow rowpackageRow = ((packageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        version,
                        attribution,
                        website,
                        updateUrl,
                        icon,
                        image,
                        desc,
                        null};
                rowpackageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpackageRow);
                return rowpackageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                packageDataTable cln = ((packageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new packageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columnversion = base.Columns["version"];
                this.columnattribution = base.Columns["attribution"];
                this.columnwebsite = base.Columns["website"];
                this.columnupdateUrl = base.Columns["updateUrl"];
                this.columnicon = base.Columns["icon"];
                this.columnimage = base.Columns["image"];
                this.columndesc = base.Columns["desc"];
                this.columnpackage_Id = base.Columns["package_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columnversion = new global::System.Data.DataColumn("version", typeof(decimal), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnversion);
                this.columnattribution = new global::System.Data.DataColumn("attribution", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnattribution);
                this.columnwebsite = new global::System.Data.DataColumn("website", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnwebsite);
                this.columnupdateUrl = new global::System.Data.DataColumn("updateUrl", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnupdateUrl);
                this.columnicon = new global::System.Data.DataColumn("icon", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnicon);
                this.columnimage = new global::System.Data.DataColumn("image", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnimage);
                this.columndesc = new global::System.Data.DataColumn("desc", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndesc);
                this.columnpackage_Id = new global::System.Data.DataColumn("package_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnpackage_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnpackage_Id}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columnversion.AllowDBNull = false;
                this.columnversion.Namespace = "";
                this.columnattribution.AllowDBNull = false;
                this.columnattribution.Namespace = "";
                this.columnwebsite.Namespace = "";
                this.columnupdateUrl.Namespace = "";
                this.columnicon.Namespace = "";
                this.columnimage.Namespace = "";
                this.columndesc.Namespace = "";
                this.columnpackage_Id.AutoIncrement = true;
                this.columnpackage_Id.AllowDBNull = false;
                this.columnpackage_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packageRow NewpackageRow() {
                return ((packageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new packageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(packageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.packageRowChanged != null)) {
                    this.packageRowChanged(this, new packageRowChangeEvent(((packageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.packageRowChanging != null)) {
                    this.packageRowChanging(this, new packageRowChangeEvent(((packageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.packageRowDeleted != null)) {
                    this.packageRowDeleted(this, new packageRowChangeEvent(((packageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.packageRowDeleting != null)) {
                    this.packageRowDeleting(this, new packageRowChangeEvent(((packageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepackageRow(packageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Package ds = new Package();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "packageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class setDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnmutex;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnicon;
            
            private global::System.Data.DataColumn columnimage;
            
            private global::System.Data.DataColumn columndesc;
            
            private global::System.Data.DataColumn columnset_Id;
            
            private global::System.Data.DataColumn columnpackage_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public setDataTable() {
                this.TableName = "set";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal setDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected setDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mutexColumn {
                get {
                    return this.columnmutex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iconColumn {
                get {
                    return this.columnicon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn imageColumn {
                get {
                    return this.columnimage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descColumn {
                get {
                    return this.columndesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn set_IdColumn {
                get {
                    return this.columnset_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn package_IdColumn {
                get {
                    return this.columnpackage_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public setRow this[int index] {
                get {
                    return ((setRow)(this.Rows[index]));
                }
            }
            
            public event setRowChangeEventHandler setRowChanging;
            
            public event setRowChangeEventHandler setRowChanged;
            
            public event setRowChangeEventHandler setRowDeleting;
            
            public event setRowChangeEventHandler setRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsetRow(setRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public setRow AddsetRow(string id, string mutex, string name, System.Uri icon, System.Uri image, System.Uri desc, packageRow parentpackageRowBypackage_set) {
                setRow rowsetRow = ((setRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        mutex,
                        name,
                        icon,
                        image,
                        desc,
                        null,
                        null};
                if ((parentpackageRowBypackage_set != null)) {
                    columnValuesArray[7] = parentpackageRowBypackage_set[8];
                }
                rowsetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsetRow);
                return rowsetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                setDataTable cln = ((setDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new setDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnmutex = base.Columns["mutex"];
                this.columnname = base.Columns["name"];
                this.columnicon = base.Columns["icon"];
                this.columnimage = base.Columns["image"];
                this.columndesc = base.Columns["desc"];
                this.columnset_Id = base.Columns["set_Id"];
                this.columnpackage_Id = base.Columns["package_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnmutex = new global::System.Data.DataColumn("mutex", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmutex);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columnicon = new global::System.Data.DataColumn("icon", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnicon);
                this.columnimage = new global::System.Data.DataColumn("image", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnimage);
                this.columndesc = new global::System.Data.DataColumn("desc", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndesc);
                this.columnset_Id = new global::System.Data.DataColumn("set_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnset_Id);
                this.columnpackage_Id = new global::System.Data.DataColumn("package_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnpackage_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnset_Id}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnmutex.Namespace = "";
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columnicon.Namespace = "";
                this.columnimage.Namespace = "";
                this.columndesc.Namespace = "";
                this.columnset_Id.AutoIncrement = true;
                this.columnset_Id.AllowDBNull = false;
                this.columnset_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public setRow NewsetRow() {
                return ((setRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new setRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(setRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.setRowChanged != null)) {
                    this.setRowChanged(this, new setRowChangeEvent(((setRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.setRowChanging != null)) {
                    this.setRowChanging(this, new setRowChangeEvent(((setRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.setRowDeleted != null)) {
                    this.setRowDeleted(this, new setRowChangeEvent(((setRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.setRowDeleting != null)) {
                    this.setRowDeleting(this, new setRowChangeEvent(((setRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesetRow(setRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Package ds = new Package();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "setDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class patchDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnpath;
            
            private global::System.Data.DataColumn columncondition;
            
            private global::System.Data.DataColumn columnpatch_Id;
            
            private global::System.Data.DataColumn columnset_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public patchDataTable() {
                this.TableName = "patch";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal patchDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected patchDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pathColumn {
                get {
                    return this.columnpath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn conditionColumn {
                get {
                    return this.columncondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn patch_IdColumn {
                get {
                    return this.columnpatch_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn set_IdColumn {
                get {
                    return this.columnset_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public patchRow this[int index] {
                get {
                    return ((patchRow)(this.Rows[index]));
                }
            }
            
            public event patchRowChangeEventHandler patchRowChanging;
            
            public event patchRowChangeEventHandler patchRowChanged;
            
            public event patchRowChangeEventHandler patchRowDeleting;
            
            public event patchRowChangeEventHandler patchRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpatchRow(patchRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public patchRow AddpatchRow(System.Uri path, string condition, setRow parentsetRowByset_patch) {
                patchRow rowpatchRow = ((patchRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        path,
                        condition,
                        null,
                        null};
                if ((parentsetRowByset_patch != null)) {
                    columnValuesArray[3] = parentsetRowByset_patch[6];
                }
                rowpatchRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpatchRow);
                return rowpatchRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                patchDataTable cln = ((patchDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new patchDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpath = base.Columns["path"];
                this.columncondition = base.Columns["condition"];
                this.columnpatch_Id = base.Columns["patch_Id"];
                this.columnset_Id = base.Columns["set_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpath = new global::System.Data.DataColumn("path", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnpath);
                this.columncondition = new global::System.Data.DataColumn("condition", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncondition);
                this.columnpatch_Id = new global::System.Data.DataColumn("patch_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnpatch_Id);
                this.columnset_Id = new global::System.Data.DataColumn("set_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnset_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnpatch_Id}, true));
                this.columnpath.AllowDBNull = false;
                this.columnpath.Namespace = "";
                this.columncondition.Namespace = "";
                this.columnpatch_Id.AutoIncrement = true;
                this.columnpatch_Id.AllowDBNull = false;
                this.columnpatch_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public patchRow NewpatchRow() {
                return ((patchRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new patchRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(patchRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.patchRowChanged != null)) {
                    this.patchRowChanged(this, new patchRowChangeEvent(((patchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.patchRowChanging != null)) {
                    this.patchRowChanging(this, new patchRowChangeEvent(((patchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.patchRowDeleted != null)) {
                    this.patchRowDeleted(this, new patchRowChangeEvent(((patchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.patchRowDeleting != null)) {
                    this.patchRowDeleting(this, new patchRowChangeEvent(((patchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepatchRow(patchRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Package ds = new Package();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "patchDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class resDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columnsrc;
            
            private global::System.Data.DataColumn columnpatch_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public resDataTable() {
                this.TableName = "res";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal resDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected resDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn srcColumn {
                get {
                    return this.columnsrc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn patch_IdColumn {
                get {
                    return this.columnpatch_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public resRow this[int index] {
                get {
                    return ((resRow)(this.Rows[index]));
                }
            }
            
            public event resRowChangeEventHandler resRowChanging;
            
            public event resRowChangeEventHandler resRowChanged;
            
            public event resRowChangeEventHandler resRowDeleting;
            
            public event resRowChangeEventHandler resRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddresRow(resRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public resRow AddresRow(string type, string id, uint lang, System.Uri src, patchRow parentpatchRowBypatch_res) {
                resRow rowresRow = ((resRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        type,
                        id,
                        lang,
                        src,
                        null};
                if ((parentpatchRowBypatch_res != null)) {
                    columnValuesArray[4] = parentpatchRowBypatch_res[2];
                }
                rowresRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowresRow);
                return rowresRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                resDataTable cln = ((resDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new resDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntype = base.Columns["type"];
                this.columnid = base.Columns["id"];
                this.columnlang = base.Columns["lang"];
                this.columnsrc = base.Columns["src"];
                this.columnpatch_Id = base.Columns["patch_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(uint), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columnsrc = new global::System.Data.DataColumn("src", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnsrc);
                this.columnpatch_Id = new global::System.Data.DataColumn("patch_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnpatch_Id);
                this.columntype.AllowDBNull = false;
                this.columntype.Namespace = "";
                this.columnid.AllowDBNull = false;
                this.columnid.Namespace = "";
                this.columnlang.Namespace = "";
                this.columnsrc.AllowDBNull = false;
                this.columnsrc.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public resRow NewresRow() {
                return ((resRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new resRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(resRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.resRowChanged != null)) {
                    this.resRowChanged(this, new resRowChangeEvent(((resRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.resRowChanging != null)) {
                    this.resRowChanging(this, new resRowChangeEvent(((resRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.resRowDeleted != null)) {
                    this.resRowDeleted(this, new resRowChangeEvent(((resRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.resRowDeleting != null)) {
                    this.resRowDeleting(this, new resRowChangeEvent(((resRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveresRow(resRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Package ds = new Package();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "resDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class fileDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnoperation;
            
            private global::System.Data.DataColumn columnpath;
            
            private global::System.Data.DataColumn columnsrc;
            
            private global::System.Data.DataColumn columncondition;
            
            private global::System.Data.DataColumn columnset_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileDataTable() {
                this.TableName = "file";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal fileDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected fileDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn operationColumn {
                get {
                    return this.columnoperation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pathColumn {
                get {
                    return this.columnpath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn srcColumn {
                get {
                    return this.columnsrc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn conditionColumn {
                get {
                    return this.columncondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn set_IdColumn {
                get {
                    return this.columnset_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileRow this[int index] {
                get {
                    return ((fileRow)(this.Rows[index]));
                }
            }
            
            public event fileRowChangeEventHandler fileRowChanging;
            
            public event fileRowChangeEventHandler fileRowChanged;
            
            public event fileRowChangeEventHandler fileRowDeleting;
            
            public event fileRowChangeEventHandler fileRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddfileRow(fileRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileRow AddfileRow(string operation, System.Uri path, System.Uri src, string condition, setRow parentsetRowByset_file) {
                fileRow rowfileRow = ((fileRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        operation,
                        path,
                        src,
                        condition,
                        null};
                if ((parentsetRowByset_file != null)) {
                    columnValuesArray[4] = parentsetRowByset_file[6];
                }
                rowfileRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowfileRow);
                return rowfileRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                fileDataTable cln = ((fileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new fileDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnoperation = base.Columns["operation"];
                this.columnpath = base.Columns["path"];
                this.columnsrc = base.Columns["src"];
                this.columncondition = base.Columns["condition"];
                this.columnset_Id = base.Columns["set_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnoperation = new global::System.Data.DataColumn("operation", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnoperation);
                this.columnpath = new global::System.Data.DataColumn("path", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnpath);
                this.columnsrc = new global::System.Data.DataColumn("src", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnsrc);
                this.columncondition = new global::System.Data.DataColumn("condition", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncondition);
                this.columnset_Id = new global::System.Data.DataColumn("set_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnset_Id);
                this.columnoperation.AllowDBNull = false;
                this.columnoperation.Namespace = "";
                this.columnpath.AllowDBNull = false;
                this.columnpath.Namespace = "";
                this.columnsrc.Namespace = "";
                this.columncondition.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileRow NewfileRow() {
                return ((fileRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new fileRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(fileRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.fileRowChanged != null)) {
                    this.fileRowChanged(this, new fileRowChangeEvent(((fileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.fileRowChanging != null)) {
                    this.fileRowChanging(this, new fileRowChangeEvent(((fileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.fileRowDeleted != null)) {
                    this.fileRowDeleted(this, new fileRowChangeEvent(((fileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.fileRowDeleting != null)) {
                    this.fileRowDeleting(this, new fileRowChangeEvent(((fileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovefileRow(fileRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Package ds = new Package();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "fileDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class extraDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnattribution;
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columnsrc;
            
            private global::System.Data.DataColumn columnset_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public extraDataTable() {
                this.TableName = "extra";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal extraDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected extraDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn attributionColumn {
                get {
                    return this.columnattribution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn srcColumn {
                get {
                    return this.columnsrc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn set_IdColumn {
                get {
                    return this.columnset_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public extraRow this[int index] {
                get {
                    return ((extraRow)(this.Rows[index]));
                }
            }
            
            public event extraRowChangeEventHandler extraRowChanging;
            
            public event extraRowChangeEventHandler extraRowChanged;
            
            public event extraRowChangeEventHandler extraRowDeleting;
            
            public event extraRowChangeEventHandler extraRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddextraRow(extraRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public extraRow AddextraRow(string name, string attribution, string type, System.Uri src, setRow parentsetRowByset_extra) {
                extraRow rowextraRow = ((extraRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        attribution,
                        type,
                        src,
                        null};
                if ((parentsetRowByset_extra != null)) {
                    columnValuesArray[4] = parentsetRowByset_extra[6];
                }
                rowextraRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowextraRow);
                return rowextraRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                extraDataTable cln = ((extraDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new extraDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columnattribution = base.Columns["attribution"];
                this.columntype = base.Columns["type"];
                this.columnsrc = base.Columns["src"];
                this.columnset_Id = base.Columns["set_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columnattribution = new global::System.Data.DataColumn("attribution", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnattribution);
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.columnsrc = new global::System.Data.DataColumn("src", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnsrc);
                this.columnset_Id = new global::System.Data.DataColumn("set_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnset_Id);
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columnattribution.AllowDBNull = false;
                this.columnattribution.Namespace = "";
                this.columntype.AllowDBNull = false;
                this.columntype.Namespace = "";
                this.columnsrc.AllowDBNull = false;
                this.columnsrc.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public extraRow NewextraRow() {
                return ((extraRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new extraRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(extraRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.extraRowChanged != null)) {
                    this.extraRowChanged(this, new extraRowChangeEvent(((extraRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.extraRowChanging != null)) {
                    this.extraRowChanging(this, new extraRowChangeEvent(((extraRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.extraRowDeleted != null)) {
                    this.extraRowDeleted(this, new extraRowChangeEvent(((extraRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.extraRowDeleting != null)) {
                    this.extraRowDeleting(this, new extraRowChangeEvent(((extraRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveextraRow(extraRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Package ds = new Package();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "extraDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class filetypeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnifNotDefined;
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columnext;
            
            private global::System.Data.DataColumn columniconFile;
            
            private global::System.Data.DataColumn columniconPath;
            
            private global::System.Data.DataColumn columnset_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public filetypeDataTable() {
                this.TableName = "filetype";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal filetypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected filetypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ifNotDefinedColumn {
                get {
                    return this.columnifNotDefined;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn extColumn {
                get {
                    return this.columnext;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iconFileColumn {
                get {
                    return this.columniconFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iconPathColumn {
                get {
                    return this.columniconPath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn set_IdColumn {
                get {
                    return this.columnset_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public filetypeRow this[int index] {
                get {
                    return ((filetypeRow)(this.Rows[index]));
                }
            }
            
            public event filetypeRowChangeEventHandler filetypeRowChanging;
            
            public event filetypeRowChangeEventHandler filetypeRowChanged;
            
            public event filetypeRowChangeEventHandler filetypeRowDeleting;
            
            public event filetypeRowChangeEventHandler filetypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddfiletypeRow(filetypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public filetypeRow AddfiletypeRow(string ifNotDefined, string type, string ext, System.Uri iconFile, System.Uri iconPath, setRow parentsetRowByset_filetype) {
                filetypeRow rowfiletypeRow = ((filetypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ifNotDefined,
                        type,
                        ext,
                        iconFile,
                        iconPath,
                        null};
                if ((parentsetRowByset_filetype != null)) {
                    columnValuesArray[5] = parentsetRowByset_filetype[6];
                }
                rowfiletypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowfiletypeRow);
                return rowfiletypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                filetypeDataTable cln = ((filetypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new filetypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnifNotDefined = base.Columns["ifNotDefined"];
                this.columntype = base.Columns["type"];
                this.columnext = base.Columns["ext"];
                this.columniconFile = base.Columns["iconFile"];
                this.columniconPath = base.Columns["iconPath"];
                this.columnset_Id = base.Columns["set_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnifNotDefined = new global::System.Data.DataColumn("ifNotDefined", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnifNotDefined);
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.columnext = new global::System.Data.DataColumn("ext", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnext);
                this.columniconFile = new global::System.Data.DataColumn("iconFile", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columniconFile);
                this.columniconPath = new global::System.Data.DataColumn("iconPath", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columniconPath);
                this.columnset_Id = new global::System.Data.DataColumn("set_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnset_Id);
                this.columnifNotDefined.Namespace = "";
                this.columntype.Namespace = "";
                this.columnext.Namespace = "";
                this.columniconFile.Namespace = "";
                this.columniconPath.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public filetypeRow NewfiletypeRow() {
                return ((filetypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new filetypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(filetypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.filetypeRowChanged != null)) {
                    this.filetypeRowChanged(this, new filetypeRowChangeEvent(((filetypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.filetypeRowChanging != null)) {
                    this.filetypeRowChanging(this, new filetypeRowChangeEvent(((filetypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.filetypeRowDeleted != null)) {
                    this.filetypeRowDeleted(this, new filetypeRowChangeEvent(((filetypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.filetypeRowDeleting != null)) {
                    this.filetypeRowDeleting(this, new filetypeRowChangeEvent(((filetypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovefiletypeRow(filetypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Package ds = new Package();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "filetypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class packageRow : global::System.Data.DataRow {
            
            private packageDataTable tablepackage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal packageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepackage = ((packageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tablepackage.nameColumn]));
                }
                set {
                    this[this.tablepackage.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal version {
                get {
                    return ((decimal)(this[this.tablepackage.versionColumn]));
                }
                set {
                    this[this.tablepackage.versionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string attribution {
                get {
                    return ((string)(this[this.tablepackage.attributionColumn]));
                }
                set {
                    this[this.tablepackage.attributionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Uri website {
                get {
                    try {
                        return ((global::System.Uri)(this[this.tablepackage.websiteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'website\' in table \'package\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepackage.websiteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Uri updateUrl {
                get {
                    try {
                        return ((global::System.Uri)(this[this.tablepackage.updateUrlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'updateUrl\' in table \'package\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepackage.updateUrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Uri icon {
                get {
                    try {
                        return ((global::System.Uri)(this[this.tablepackage.iconColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'icon\' in table \'package\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepackage.iconColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Uri image {
                get {
                    try {
                        return ((global::System.Uri)(this[this.tablepackage.imageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'image\' in table \'package\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepackage.imageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Uri desc {
                get {
                    try {
                        return ((global::System.Uri)(this[this.tablepackage.descColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'desc\' in table \'package\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepackage.descColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int package_Id {
                get {
                    return ((int)(this[this.tablepackage.package_IdColumn]));
                }
                set {
                    this[this.tablepackage.package_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IswebsiteNull() {
                return this.IsNull(this.tablepackage.websiteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetwebsiteNull() {
                this[this.tablepackage.websiteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsupdateUrlNull() {
                return this.IsNull(this.tablepackage.updateUrlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetupdateUrlNull() {
                this[this.tablepackage.updateUrlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiconNull() {
                return this.IsNull(this.tablepackage.iconColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeticonNull() {
                this[this.tablepackage.iconColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsimageNull() {
                return this.IsNull(this.tablepackage.imageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetimageNull() {
                this[this.tablepackage.imageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescNull() {
                return this.IsNull(this.tablepackage.descColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescNull() {
                this[this.tablepackage.descColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public setRow[] GetsetRows() {
                if ((this.Table.ChildRelations["package_set"] == null)) {
                    return new setRow[0];
                }
                else {
                    return ((setRow[])(base.GetChildRows(this.Table.ChildRelations["package_set"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class setRow : global::System.Data.DataRow {
            
            private setDataTable tableset;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal setRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableset = ((setDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tableset.idColumn]));
                }
                set {
                    this[this.tableset.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mutex {
                get {
                    try {
                        return ((string)(this[this.tableset.mutexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mutex\' in table \'set\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableset.mutexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableset.nameColumn]));
                }
                set {
                    this[this.tableset.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Uri icon {
                get {
                    try {
                        return ((global::System.Uri)(this[this.tableset.iconColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'icon\' in table \'set\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableset.iconColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Uri image {
                get {
                    try {
                        return ((global::System.Uri)(this[this.tableset.imageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'image\' in table \'set\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableset.imageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Uri desc {
                get {
                    try {
                        return ((global::System.Uri)(this[this.tableset.descColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'desc\' in table \'set\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableset.descColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int set_Id {
                get {
                    return ((int)(this[this.tableset.set_IdColumn]));
                }
                set {
                    this[this.tableset.set_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int package_Id {
                get {
                    try {
                        return ((int)(this[this.tableset.package_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'package_Id\' in table \'set\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableset.package_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packageRow packageRow {
                get {
                    return ((packageRow)(this.GetParentRow(this.Table.ParentRelations["package_set"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["package_set"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmutexNull() {
                return this.IsNull(this.tableset.mutexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmutexNull() {
                this[this.tableset.mutexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiconNull() {
                return this.IsNull(this.tableset.iconColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeticonNull() {
                this[this.tableset.iconColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsimageNull() {
                return this.IsNull(this.tableset.imageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetimageNull() {
                this[this.tableset.imageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescNull() {
                return this.IsNull(this.tableset.descColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescNull() {
                this[this.tableset.descColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispackage_IdNull() {
                return this.IsNull(this.tableset.package_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpackage_IdNull() {
                this[this.tableset.package_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public patchRow[] GetpatchRows() {
                if ((this.Table.ChildRelations["set_patch"] == null)) {
                    return new patchRow[0];
                }
                else {
                    return ((patchRow[])(base.GetChildRows(this.Table.ChildRelations["set_patch"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileRow[] GetfileRows() {
                if ((this.Table.ChildRelations["set_file"] == null)) {
                    return new fileRow[0];
                }
                else {
                    return ((fileRow[])(base.GetChildRows(this.Table.ChildRelations["set_file"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public extraRow[] GetextraRows() {
                if ((this.Table.ChildRelations["set_extra"] == null)) {
                    return new extraRow[0];
                }
                else {
                    return ((extraRow[])(base.GetChildRows(this.Table.ChildRelations["set_extra"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public filetypeRow[] GetfiletypeRows() {
                if ((this.Table.ChildRelations["set_filetype"] == null)) {
                    return new filetypeRow[0];
                }
                else {
                    return ((filetypeRow[])(base.GetChildRows(this.Table.ChildRelations["set_filetype"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class patchRow : global::System.Data.DataRow {
            
            private patchDataTable tablepatch;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal patchRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepatch = ((patchDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Uri path {
                get {
                    return ((global::System.Uri)(this[this.tablepatch.pathColumn]));
                }
                set {
                    this[this.tablepatch.pathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string condition {
                get {
                    try {
                        return ((string)(this[this.tablepatch.conditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'condition\' in table \'patch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepatch.conditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int patch_Id {
                get {
                    return ((int)(this[this.tablepatch.patch_IdColumn]));
                }
                set {
                    this[this.tablepatch.patch_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int set_Id {
                get {
                    try {
                        return ((int)(this[this.tablepatch.set_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'set_Id\' in table \'patch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepatch.set_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public setRow setRow {
                get {
                    return ((setRow)(this.GetParentRow(this.Table.ParentRelations["set_patch"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["set_patch"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconditionNull() {
                return this.IsNull(this.tablepatch.conditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconditionNull() {
                this[this.tablepatch.conditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isset_IdNull() {
                return this.IsNull(this.tablepatch.set_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setset_IdNull() {
                this[this.tablepatch.set_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public resRow[] GetresRows() {
                if ((this.Table.ChildRelations["patch_res"] == null)) {
                    return new resRow[0];
                }
                else {
                    return ((resRow[])(base.GetChildRows(this.Table.ChildRelations["patch_res"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class resRow : global::System.Data.DataRow {
            
            private resDataTable tableres;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal resRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableres = ((resDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    return ((string)(this[this.tableres.typeColumn]));
                }
                set {
                    this[this.tableres.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    return ((string)(this[this.tableres.idColumn]));
                }
                set {
                    this[this.tableres.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint lang {
                get {
                    try {
                        return ((uint)(this[this.tableres.langColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lang\' in table \'res\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableres.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Uri src {
                get {
                    return ((global::System.Uri)(this[this.tableres.srcColumn]));
                }
                set {
                    this[this.tableres.srcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int patch_Id {
                get {
                    try {
                        return ((int)(this[this.tableres.patch_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'patch_Id\' in table \'res\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableres.patch_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public patchRow patchRow {
                get {
                    return ((patchRow)(this.GetParentRow(this.Table.ParentRelations["patch_res"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["patch_res"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslangNull() {
                return this.IsNull(this.tableres.langColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlangNull() {
                this[this.tableres.langColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispatch_IdNull() {
                return this.IsNull(this.tableres.patch_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpatch_IdNull() {
                this[this.tableres.patch_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class fileRow : global::System.Data.DataRow {
            
            private fileDataTable tablefile;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal fileRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablefile = ((fileDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string operation {
                get {
                    return ((string)(this[this.tablefile.operationColumn]));
                }
                set {
                    this[this.tablefile.operationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Uri path {
                get {
                    return ((global::System.Uri)(this[this.tablefile.pathColumn]));
                }
                set {
                    this[this.tablefile.pathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Uri src {
                get {
                    try {
                        return ((global::System.Uri)(this[this.tablefile.srcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'src\' in table \'file\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefile.srcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string condition {
                get {
                    try {
                        return ((string)(this[this.tablefile.conditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'condition\' in table \'file\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefile.conditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int set_Id {
                get {
                    try {
                        return ((int)(this[this.tablefile.set_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'set_Id\' in table \'file\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefile.set_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public setRow setRow {
                get {
                    return ((setRow)(this.GetParentRow(this.Table.ParentRelations["set_file"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["set_file"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssrcNull() {
                return this.IsNull(this.tablefile.srcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsrcNull() {
                this[this.tablefile.srcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconditionNull() {
                return this.IsNull(this.tablefile.conditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconditionNull() {
                this[this.tablefile.conditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isset_IdNull() {
                return this.IsNull(this.tablefile.set_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setset_IdNull() {
                this[this.tablefile.set_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class extraRow : global::System.Data.DataRow {
            
            private extraDataTable tableextra;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal extraRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableextra = ((extraDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableextra.nameColumn]));
                }
                set {
                    this[this.tableextra.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string attribution {
                get {
                    return ((string)(this[this.tableextra.attributionColumn]));
                }
                set {
                    this[this.tableextra.attributionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    return ((string)(this[this.tableextra.typeColumn]));
                }
                set {
                    this[this.tableextra.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Uri src {
                get {
                    return ((global::System.Uri)(this[this.tableextra.srcColumn]));
                }
                set {
                    this[this.tableextra.srcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int set_Id {
                get {
                    try {
                        return ((int)(this[this.tableextra.set_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'set_Id\' in table \'extra\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableextra.set_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public setRow setRow {
                get {
                    return ((setRow)(this.GetParentRow(this.Table.ParentRelations["set_extra"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["set_extra"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isset_IdNull() {
                return this.IsNull(this.tableextra.set_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setset_IdNull() {
                this[this.tableextra.set_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class filetypeRow : global::System.Data.DataRow {
            
            private filetypeDataTable tablefiletype;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal filetypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablefiletype = ((filetypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ifNotDefined {
                get {
                    try {
                        return ((string)(this[this.tablefiletype.ifNotDefinedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ifNotDefined\' in table \'filetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefiletype.ifNotDefinedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.tablefiletype.typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'filetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefiletype.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ext {
                get {
                    try {
                        return ((string)(this[this.tablefiletype.extColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ext\' in table \'filetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefiletype.extColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Uri iconFile {
                get {
                    try {
                        return ((global::System.Uri)(this[this.tablefiletype.iconFileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'iconFile\' in table \'filetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefiletype.iconFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Uri iconPath {
                get {
                    try {
                        return ((global::System.Uri)(this[this.tablefiletype.iconPathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'iconPath\' in table \'filetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefiletype.iconPathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int set_Id {
                get {
                    try {
                        return ((int)(this[this.tablefiletype.set_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'set_Id\' in table \'filetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefiletype.set_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public setRow setRow {
                get {
                    return ((setRow)(this.GetParentRow(this.Table.ParentRelations["set_filetype"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["set_filetype"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsifNotDefinedNull() {
                return this.IsNull(this.tablefiletype.ifNotDefinedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetifNotDefinedNull() {
                this[this.tablefiletype.ifNotDefinedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tablefiletype.typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tablefiletype.typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsextNull() {
                return this.IsNull(this.tablefiletype.extColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetextNull() {
                this[this.tablefiletype.extColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiconFileNull() {
                return this.IsNull(this.tablefiletype.iconFileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeticonFileNull() {
                this[this.tablefiletype.iconFileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiconPathNull() {
                return this.IsNull(this.tablefiletype.iconPathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeticonPathNull() {
                this[this.tablefiletype.iconPathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isset_IdNull() {
                return this.IsNull(this.tablefiletype.set_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setset_IdNull() {
                this[this.tablefiletype.set_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class packageRowChangeEvent : global::System.EventArgs {
            
            private packageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packageRowChangeEvent(packageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class setRowChangeEvent : global::System.EventArgs {
            
            private setRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public setRowChangeEvent(setRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public setRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class patchRowChangeEvent : global::System.EventArgs {
            
            private patchRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public patchRowChangeEvent(patchRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public patchRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class resRowChangeEvent : global::System.EventArgs {
            
            private resRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public resRowChangeEvent(resRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public resRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class fileRowChangeEvent : global::System.EventArgs {
            
            private fileRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileRowChangeEvent(fileRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class extraRowChangeEvent : global::System.EventArgs {
            
            private extraRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public extraRowChangeEvent(extraRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public extraRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class filetypeRowChangeEvent : global::System.EventArgs {
            
            private filetypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public filetypeRowChangeEvent(filetypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public filetypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
